{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","length","prototypes","PropTypes","string","isRequired","AboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.296700a5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.prototypes= {title: PropTypes.string.isRequired,\r\n                   AboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps= {\r\n    title: 'Set title here',\r\n    AboutText: 'About text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    \r\n    const handleUpClick= ()=>{\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        // setText(\"You have clicked on handleUpClick\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to upper case\", 'success')\r\n       \r\n    }  \r\n    \r\n    const handleClearClick= ()=>{\r\n      console.log(\"Clear Text Was Clicked\" + text);\r\n      // setText(\"You have clicked on handleUpClick\")\r\n      let newText = '';\r\n      setText(newText)\r\n      props.showAlert(\"Text cleared!\", 'success')\r\n    }\r\n    \r\n    const handleLoClick= ()=>{\r\n      console.log(\"Lowercase was clicked\" + text);\r\n      // setText(\"You have clicked on handleUpClick\")\r\n      let newText = text.toLowerCase();\r\n      setText(newText)\r\n      props.showAlert(\"Converted to lower case\", 'success')\r\n     \r\n  }  \r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy =()=>{\r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Text copied!\", 'success')\r\n    }\r\n\r\n    const handleExtraSpaces =()=>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"))\r\n      props.showAlert(\"Extra spaces removed!\", 'success')\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    // text = \"new text\";     // Wrong way to change the state\r\n    //setText(\"new text\");   // Correct way to change the state\r\n  return (\r\n    <>\r\n\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading} </h1> \r\n            <div className=\"mb-3\" >\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick} >Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces} >Remove Extra Space</button>\r\n\r\n    \r\n    </div>\r\n\r\n    <div className=\"conatiner my-3 \" style={{color: props.mode==='dark'?'white':'black'}} >\r\n      <h1>Your Text Summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length > 0 ?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\n\nfunction App() {\n\n  const[mode, setMode]= useState('light');   // Whether dark mod is enabled or not\n  const[alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      }) \n      setTimeout(()=>{\n            setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode =()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\")\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has enabled\",'success');\n      document.title = 'Text-Utils - Dark Mode';\n      // setInterval(()=>{\n      //   document.title = 'Text-Utils is Amazing';\n      // },2000);\n      // setInterval(()=>{\n      //   document.title = 'Install Text-Utils Now';\n      // },1500);\n    }\n    else{\n      setMode(\"light\")\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has enabled\",'success');\n      document.title = 'Text-Utils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <BrowserRouter> */}\n    <Navbar title =\"TextUtils\" AboutText = \"About TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    {/* <Navbar/> */}\n    <Alert alert = {alert}/>\n    <div className=\"container my-3\">\n    <TextForm heading = \"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/>\n    {/* <Routes>\n          <Route path=\"/about\"\n            element={<About/>}/>\n          \n          <Route path=\"/\"\n            element={<TextForm heading = \"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/>}/>\n    </Routes>  */}\n    </div>\n    {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}